//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpecialJobs
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MethodsEntities : DbContext
    {
        public MethodsEntities()
            : base("name=MethodsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ANALYSIS> ANALYSIS { get; set; }
        public DbSet<ANTENNA> ANTENNA { get; set; }
        public DbSet<ANTENNA_ARM> ANTENNA_ARM { get; set; }
        public DbSet<ANTENNA_CALIBRATION> ANTENNA_CALIBRATION { get; set; }
        public DbSet<ARM> ARM { get; set; }
        public DbSet<ARM_TYPE> ARM_TYPE { get; set; }
        public DbSet<COUNTRY> COUNTRY { get; set; }
        public DbSet<EQUIPMENT> EQUIPMENT { get; set; }
        public DbSet<EQUIPMENT_TYPE> EQUIPMENT_TYPE { get; set; }
        public DbSet<FIDER> FIDER { get; set; }
        public DbSet<FIDER_CALIBRATION> FIDER_CALIBRATION { get; set; }
        public DbSet<MEASURING_DEVICE> MEASURING_DEVICE { get; set; }
        public DbSet<MEASURING_DEVICE_ARM> MEASURING_DEVICE_ARM { get; set; }
        public DbSet<MEASURING_DEVICE_TYPE> MEASURING_DEVICE_TYPE { get; set; }
        public DbSet<MEASURING_EQUIPMENT> MEASURING_EQUIPMENT { get; set; }
        public DbSet<MEASURING_EQUIPMENT_ARM> MEASURING_EQUIPMENT_ARM { get; set; }
        public DbSet<MEASURING_FOR_REPORT> MEASURING_FOR_REPORT { get; set; }
        public DbSet<METHOD> METHOD { get; set; }
        public DbSet<ORGANIZATION> ORGANIZATION { get; set; }
        public DbSet<PERSON> PERSON { get; set; }
        public DbSet<PRODUCER> PRODUCER { get; set; }
        public DbSet<REPORT_DATA> REPORT_DATA { get; set; }
        public DbSet<TableUpdated> TableUpdated { get; set; }
        public DbSet<UNIT> UNIT { get; set; }
        public DbSet<CurrentUserTask> CurrentUserTask { get; set; }
        public DbSet<AllArmsView> AllArmsView { get; set; }
        public DbSet<RESULT> RESULT { get; set; }
        public DbSet<MODE_TYPE> MODE_TYPE { get; set; }
        public DbSet<MEASURING_EQUIPMENT_TYPE> MEASURING_EQUIPMENT_TYPE { get; set; }
        public DbSet<MODE> MODE { get; set; }
        public DbSet<MEASURING_DATA> MEASURING_DATA { get; set; }
    
        public virtual int Merge()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Merge");
        }
    }
}
